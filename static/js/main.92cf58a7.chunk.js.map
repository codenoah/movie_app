{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","react_default","a","createElement","src","alt","className","MovieGenre","_ref3","genre","Movie","_ref","title","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","large_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA+BA,SAASA,EAATC,GAA+B,IAATC,EAASD,EAATC,OAElB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAQK,IAAI,eAAeC,UAAU,iBAGvD,SAASC,EAATC,GAA6B,IAARC,EAAQD,EAARC,MAEjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeG,GAqBxBC,MAxDf,SAAAC,GAAkD,IAAlCC,EAAkCD,EAAlCC,MAAOZ,EAA2BW,EAA3BX,OAAQa,EAAmBF,EAAnBE,OAAQC,EAAWH,EAAXG,SACnC,OACIb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACXL,EAAAC,EAAAC,cAACL,EAAD,CAAaE,OAAQA,EAAQK,IAAKO,KAEtCX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACXL,EAAAC,EAAAC,cAAA,UAAKS,GACLX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACVO,EAAOE,IAAI,SAACN,EAAOO,GAAR,OAAkBf,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOQ,IAAKD,OAEjEf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACIiB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCwCjBC,6MAvDXC,MAAQ,KAeRC,cAAgB,WAWZ,OAVeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GAEjC,OADAC,QAAQC,IAAIF,GACL5B,EAAAC,EAAAC,cAAC6B,EAAD,CACHpB,MAAOiB,EAAMI,cACbjC,OAAQ6B,EAAMK,kBACdjB,IAAKY,EAAMM,GACXtB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAO5BsB,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAApC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYf,EAAKgB,WADjB,OACHf,EADGY,EAAAI,KAETjB,EAAKkB,SAAS,CACVjB,WAHK,wBAAAY,EAAAM,SAAAT,QAObM,SAAW,WACP,OAAOI,MAAM,iEACRC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKvB,SACvBwB,MAAM,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,uIAlC9BC,KAAKlB,8CAsCA,IACER,EAAU0B,KAAK7B,MAAfG,OACP,OACI3B,EAAAC,EAAAC,cAAA,OAAKG,UAAWsB,EAAS,MAAQ,gBAC5B0B,KAAK7B,MAAMG,OAAS0B,KAAK5B,gBAAkB,kBAnD1C6B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.92cf58a7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport './Movie.css';\n\nfunction Movie({title, poster, genres, synopsis}) {\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie_Column\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie_Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie_Genres\">\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\n                </div>\n                <div className=\"Movie_Synopsis\">\n                    <LinesEllipsis\n                        text={synopsis}\n                        maxLine=\"3\"\n                        ellipsis=\"...\"\n                        trimRight\n                        basedOn=\"letters\"\n                    />\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction MoviePoster({poster}) {\n\n    return (\n        <img src={poster} alt=\"Movie Poster\" className=\"Movie_Poster\"/>\n    )\n}\nfunction MovieGenre({genre}) {\n\n    return (\n        <span className=\"Movie_Genre\">{genre}</span>\n    )\n\n}\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n    alt: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired\n}\n\n\nexport default Movie\n","import React, {Component} from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\nclass App extends Component {\n\n    state = {}\n\n    componentWillMount() {\n\n    }\n\n    componentDidMount() {\n        this._getMovies();\n    }\n\n    /**\n     * 리액트는 내부 함수가 많기 때문에\n     * 리액트 자체 함수인지 내가 만든 함수인지 확인하기 위하여\n     * _를 함수명 앞에 붙여주는게 좋다.\n     */\n    _renderMovies = () => { // 컴포넌트의 index는 이용하지 않는것이 좋다. 왜냐 느리니까!\n        const movies = this.state.movies.map(movie => {\n            console.log(movie)\n            return <Movie\n                title={movie.title_english}\n                poster={movie.large_cover_image}\n                key={movie.id}\n                genres={movie.genres}\n                synopsis={movie.synopsis}\n            />\n        })\n        return movies\n\n    }\n\n    _getMovies = async () => {  // await: 성공 실패 여부를 떠나 끝나기를 기다리다 끝나면 this._callApi를 실행한다.\n        const movies = await this._callApi();\n        this.setState({\n            movies  // state 에 callApi 에서 반환한 json 타입의 데이터가 저장된다.\n        })\n    }\n\n    _callApi = () => {\n        return fetch(\"https://yts.lt/api/v2/list_movies.json?sort_by=download_count\")\n            .then(response => response.json()) // 위의 작업이 끝나면: 성공적이 수행이 아니라 그냥 작업이 끝나면 결과값을 넣는다. response 는 이름을 바꿔도 상관없다.\n            .then(json => json.data.movies) // 위 작업의 결과값\n            .catch(err => console.log(err)); // 모던 javaScript : 에러가 나면 console에 보여준다.\n    };\n\n\n    render() {\n        const {movies} = this.state\n        return (\n            <div className={movies ? \"App\" : \"App--loading\"}>\n                {this.state.movies ? this._renderMovies() : \"Loading\"}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}